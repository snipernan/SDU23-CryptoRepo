import random
import time
from Crypto.Cipher import AES

S_BOX = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

RCON = [ 0x01, 0x02, 0x04, 0x08, 0x10,0x20, 0x40, 0x80, 0x1B, 0x36 ]

mul2=[
	0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
	0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
	0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
	0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
	0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
	0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
	0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
	0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
	0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
	0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
	0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
	0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
	0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
	0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
	0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
	0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
]
 
mul3=[
	0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
	0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
	0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
	0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
	0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
	0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
	0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
	0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
	0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
	0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
	0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
	0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
	0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
	0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
	0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
	0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
]

def key_expansion(key_state):
    """
    AES-128密钥扩展算法
    :param key: 16字节的原始密钥
    :return: 176字节的扩展密钥
    """

    expanded_key = [0] * 176
    
    # 将原始密钥复制到扩展密钥的前16字节
    for i in range(4):
        for j in range(4):
            expanded_key[4*i+j] = key_state[j][i]
    
    # 生成其他的字节
    for i in range(1,11):
	    expanded_key[16 * i] =    expanded_key[(i - 1) * 16] ^     S_BOX[(expanded_key[(i - 1)*16+13])//16][(expanded_key[(i - 1)*16+13])%16] ^ RCON[i - 1]
	    expanded_key[16 * i + 1] = expanded_key[(i - 1) * 16 + 1] ^ S_BOX[(expanded_key[(i - 1)*16+14])//16][(expanded_key[(i - 1)*16+14])%16]
	    expanded_key[16 * i + 2] = expanded_key[(i - 1) * 16 + 2] ^ S_BOX[(expanded_key[(i - 1)*16+15])//16][(expanded_key[(i - 1)*16+15])%16]
	    expanded_key[16 * i + 3] = expanded_key[(i - 1) * 16 + 3] ^ S_BOX[(expanded_key[(i - 1)*16+12])//16][(expanded_key[(i - 1)*16+12])%16]
	    expanded_key[16 * i + 4] = expanded_key[(i - 1) * 16 + 4] ^ expanded_key[i * 16]
	    expanded_key[16 * i + 5] = expanded_key[(i - 1) * 16 + 5] ^ expanded_key[i * 16 + 1]
	    expanded_key[16 * i + 6] = expanded_key[(i - 1) * 16 + 6] ^ expanded_key[i * 16 + 2]
	    expanded_key[16 * i + 7] = expanded_key[(i - 1) * 16 + 7] ^ expanded_key[i * 16 + 3]        
	    expanded_key[16 * i + 8] = expanded_key[(i - 1) * 16 + 8] ^ expanded_key[i * 16 + 4]
	    expanded_key[16 * i + 9] = expanded_key[(i - 1) * 16 + 9] ^ expanded_key[i * 16 + 5]
	    expanded_key[16 * i + 10] = expanded_key[(i - 1) * 16 + 10] ^ expanded_key[i * 16 + 6]
	    expanded_key[16 * i + 11] = expanded_key[(i - 1) * 16 + 11] ^ expanded_key[i * 16 + 7]
	    expanded_key[16 * i + 12] = expanded_key[(i - 1) * 16 + 12] ^ expanded_key[i * 16 + 8]
	    expanded_key[16 * i + 13] = expanded_key[(i - 1) * 16 + 13] ^ expanded_key[i * 16 + 9]
	    expanded_key[16 * i + 14] = expanded_key[(i - 1) * 16 + 14] ^ expanded_key[i * 16 + 10]
	    expanded_key[16 * i + 15] = expanded_key[(i - 1) * 16 + 15] ^ expanded_key[i * 16 + 11]

        
    expanded_key_inv = [0] * 176
    for i in range(11):
        for j in range(4):
            for t in range(4):
                expanded_key_inv[i*16+j*4+t]=expanded_key[i*16+j+t*4]                

    return expanded_key_inv

def text_to_matrix(bytes_):
    """
    将字节串转换为状态矩阵
    """
    # 计算需要填充的字节数
    padding_length = 16 - (len(bytes_) % 16)
    # 在字节串末尾添加填充字节
    bytes_ += bytes([padding_length] * padding_length)
    # 将字节串转换为状态矩阵
    matrix = []
    for i in range(4):
        row = []
        for j in range(4):
            index = i + j * 4
            value = bytes_[index]
            row.append(value)
        matrix.append(row)
    return matrix

def add_round_key_first(state, key):
    for i in range(4):
        for j in range(4):
            state[i][j] ^= key[i][j]
    return state

def sub_bytes(state):
    for i in range(4):
        for j in range(4):
            state[i][j] = S_BOX[state[i][j] >> 4][state[i][j] & 0x0f]
    return state

def shift_rows(state):
    for i in range(1, 4):
        state[i] = state[i][i:] + state[i][:i]



# 定义列混淆操作
def mix_columns(state):
    tmp = bytearray(16)
    for i in range(4):
        idx = 4 * i
        tmp[idx] = (mul2[state[idx%4][idx//4]] ^ mul3[state[(idx + 1)%4][(idx + 1)//4]] ^ state[(idx + 2)%4][(idx + 2)//4] ^ state[(idx + 3)%4][(idx + 3)//4])
        tmp[idx + 1] = (state[idx%4][idx//4] ^ mul2[state[(idx + 1)%4][(idx + 1)//4]] ^ mul3[state[(idx + 2)%4][(idx + 2)//4]] ^ state[(idx + 3)%4][(idx + 3)//4])
        tmp[idx + 2] = (state[idx%4][idx//4] ^ state[(idx + 1)%4][(idx + 1)//4] ^ mul2[state[(idx + 2)%4][(idx + 2)//4]] ^ mul3[state[(idx + 3)%4][(idx + 3)//4]])
        tmp[idx + 3] = (mul3[state[idx%4][idx//4]] ^ state[(idx + 1)%4][(idx + 1)//4] ^ state[(idx + 2)%4][(idx + 2)//4] ^ mul2[state[(idx + 3)%4][(idx + 3)//4]])
    for i in range(4):
        for j in range(4):
            state[i][j] = tmp[j*4+i]

def add_round_key(state, round_key):
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i*4+j]


def encrypt(plaintext, key):
    state=text_to_matrix(plaintext)
    key_state=text_to_matrix(key)
    expanded_key=key_expansion(key_state)
    state=add_round_key_first(state, key_state)
    # 定义轮数
    NUM_ROUNDS = 10

    for i in range(1, NUM_ROUNDS):
        sub_bytes(state)
        shift_rows(state)
        mix_columns(state)
        add_round_key(state, expanded_key[16*i:16*(i+1)])
        
    # 最终轮
    sub_bytes(state)
    shift_rows(state)
    add_round_key(state, expanded_key[16*NUM_ROUNDS:])

    # 将加密后的4x4矩阵转化为密文
    ciphertext = []
    for i in range(4):
        for j in range(4):
            ciphertext.append(state[j][i])

    return bytes(ciphertext)





NUM_PLAINTEXTS = 256
KEY_SIZE = 16

# 生成一个密钥
key_prefix = b'202100460027'
key_suffix = b'\x00\x00\x00\x00'

key = key_prefix + key_suffix
key = key.ljust(16, b'\x00')

# 生成 100 组明文集合
plaintext_sets = []
for _ in range(100):
    plaintexts = []
    for i in range(NUM_PLAINTEXTS):
        plaintext = bytearray([i])
        plaintext.extend([random.randint(0, 255)] * (NUM_PLAINTEXTS - 1))
        plaintexts.append(plaintext)
    plaintext_sets.append(plaintexts)

print(plaintext_sets[0][3])

# 库函数加密明文
ciphertext_sets = []
time_start = time.time()
cipher = AES.new(bytes(key), AES.MODE_ECB)
for i in range(100):
    plaintexts = plaintext_sets[i]
    ciphertexts = [cipher.encrypt(bytes(plaintext)) for plaintext in plaintexts]
    ciphertext_sets.append(ciphertexts)
time_end = time.time()
run_time = time_end - time_start
print(run_time)

#自己函数加密明文
ciphertext_sets = []
time_start = time.time()
for i in range(100):
    for j in range(256):
        plaintexts = plaintext_sets[i][j]
        ciphertexts = encrypt(plaintexts, key)
        ciphertext_sets.append(ciphertexts)
time_end = time.time()
run_time = time_end - time_start
print(run_time)
    
